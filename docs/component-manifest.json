{
  "components": [
    {
      "name": "Button",
      "path": "src/components/ui/button.js",
      "kind": "html-string-factory",
      "signature": "Button({ id?, label, variant?, size?, attrs?, type? }) -> string",
      "returns": "HTML string for a styled <button>",
      "notes": "variant: 'secondary' supported; size: 'small'|'sm' adds .small"
    },
    {
      "name": "makePlayerConfigurator",
      "path": "src/components/ui/playerConfigurator.js",
      "kind": "dom-factory",
      "signature": "makePlayerConfigurator({ rows?, cols?, allowNoneFrom?, buildSelect, buildExtra?, buildName, modeFor, onSelectChange? }) -> { root, sels, names, extras, updateVisibility() }",
      "returns": "Configurable multi-row player setup using ControlsGrid with cascading None handling",
      "styles": [".controls-grid", ".controls-row"],
      "notes": "Builds N labeled rows; supports an optional middle control (e.g., Memory). Visibility cascades: row i shows only when row i-1 is not None."
    },
    {
      "name": "makeControlsGrid",
      "path": "src/components/ui/controlsGrid.js",
      "kind": "dom-factory",
      "signature": "makeControlsGrid({ cols?, gap? }) -> { root, addRow({ id?, label, a?, b?, c?, mode? }), getRow(id) }",
      "returns": "Labeled control rows with 1/2/3 control modes and fixed column widths",
      "styles": [".controls-grid", ".controls-row", ".controls-label", ".mode-one", ".mode-two", ".mode-three"],
      "notes": "Use mode 'one' for single control spanning columns 2–4, 'two' for left control spanning 2–3 with a right control in 4, and 'three' for distinct controls in 2/3/4. Customize column widths via cols option."
    },
    {
      "name": "makeTabs",
      "path": "src/components/ui/tabs.js",
      "kind": "dom-factory",
      "signature": "makeTabs({ items: [{id,label}], activeId?, onChange? }) -> { root, setActive(id,emit?), getActive() }",
      "returns": "Tabs header element + control methods",
      "styles": [".tabs", ".pips-tab", ".is-active"],
      "notes": "Reusable across pages; items ids drive tab selection"
    },
    {
      "name": "numberField",
      "path": "src/components/ui/inputs.js",
      "kind": "field-factory",
      "signature": "numberField({ id?, label?, value?, min?, max?, step? }) -> { wrapper, input }",
      "returns": "Labeled numeric input with .ui-field/.ui-control structure",
      "styles": [".ui-field", ".ui-control", "input.control"],
      "notes": "Attach listeners to returned input; append wrapper into layouts"
    },
    {
      "name": "openModal",
      "path": "src/components/ui/modal.js",
      "kind": "dom-factory",
      "signature": "openModal({ title, body (string|Element), actions: [{label,variant,onClick}]?, onClose? }) -> { close }",
      "returns": "Overlay modal; call close() to dismiss",
      "notes": "Actions auto-close after onClick; Escape closes"
    },
    {
      "name": "FaceIcon",
      "path": "src/components/ui/faceIcon.js",
      "kind": "svg-factory",
      "signature": "FaceIcon('smiley'|'frowny', { size?, strokeWidth? }) -> SVGElement",
      "returns": "SVG element",
      "notes": "Colors follow built-in palette"
    },
    {
      "name": "Card",
      "path": "src/components/ui/card.js",
      "kind": "html-string-factory",
      "signature": "Card({ title, tagline?, img, link, alt? }) -> string",
      "returns": "HTML string for gallery card",
      "notes": "Used in gallery grid"
    },
    {
      "name": "Accordion",
      "path": "src/components/ui/accordion.js",
      "kind": "dom-factory",
      "signature": "Accordion({ summary, content (Element), open? }) -> Element",
      "returns": "<details> element with provided summary and content",
      "notes": "Use makeAccordionGroup(items) to assemble lists"
    },
    {
      "name": "LighthouseIcon",
      "path": "src/components/ui/lighthouseIcon.js",
      "kind": "svg-factory",
      "signature": "LighthouseIcon('lit'|'unlit', { size?, strokeWidth? }) -> SVGElement",
      "returns": "SVG element of a lighthouse (with or without beams)",
      "notes": "Use in game grid or UI accents"
    }
  ],
  "conventions": {
    "styling": [".button", ".button-secondary", ".ui-field", ".ui-control", "--radius", "--border"],
    "routing": "src/consts/routes.js lazy imports",
    "patchNotes": "Use PatchEntry(date, iter, bullets) in About page; newest first; only user-visible outcomes"
  }
}
